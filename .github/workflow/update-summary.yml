name: Update Summary

on:
  push:
    branches: [ main, master ]
    paths: [ '**.md' ]
  pull_request:
    branches: [ main, master ]
    paths: [ '**.md' ]

jobs:
  update-summary:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Update SUMMARY.md
      run: |
        python3 << 'EOF'
        import os
        import re
        from pathlib import Path

        def format_title(filename):
            """Convert filename to a readable title"""
            # Remove .md extension and replace hyphens/underscores with spaces
            title = filename.replace('.md', '').replace('-', ' ').replace('_', ' ')
            # Capitalize each word
            return ' '.join(word.capitalize() for word in title.split())

        def get_markdown_files():
            """Get all markdown files except SUMMARY.md and README.md"""
            md_files = []
            for file in Path('.').rglob('*.md'):
                if file.name.lower() not in ['summary.md', 'readme.md'] and not file.parts[0].startswith('.'):
                    md_files.append(file)
            return sorted(md_files)

        def update_summary():
            """Update SUMMARY.md with new entries"""
            summary_path = Path('SUMMARY.md')
            
            # Create SUMMARY.md if it doesn't exist
            if not summary_path.exists():
                with open(summary_path, 'w') as f:
                    f.write('# Table of Contents\n\n')
            
            # Read current content
            with open(summary_path, 'r') as f:
                content = f.read()
            
            # Find existing entries
            existing_entries = set()
            for line in content.split('\n'):
                match = re.search(r'\[.*?\]\((.*?)\)', line)
                if match:
                    existing_entries.add(match.group(1))
            
            # Get all markdown files
            md_files = get_markdown_files()
            
            # Find new files
            new_files = []
            for file in md_files:
                file_path = str(file).replace('\\', '/')  # Normalize path separators
                if file_path not in existing_entries:
                    new_files.append(file)
            
            if not new_files:
                print("No new files to add to SUMMARY.md")
                return False
            
            # Prepare new entries
            new_entries = []
            for file in new_files:
                title = format_title(file.name)
                file_path = str(file).replace('\\', '/')
                entry = f"* [{title}]({file_path})"
                new_entries.append(entry)
            
            # Update content
            lines = content.split('\n')
            
            # Find where to insert (after "# Table of Contents" or similar header)
            insert_index = 1  # Default to after first line
            for i, line in enumerate(lines):
                if line.strip().lower().startswith('# table of contents') or line.strip().startswith('# Table of Contents'):
                    # Look for the next non-empty line or end of headers
                    insert_index = i + 1
                    while insert_index < len(lines) and (lines[insert_index].strip() == '' or lines[insert_index].strip().startswith('#')):
                        insert_index += 1
                    break
            
            # Insert new entries at the top of the list
            for entry in reversed(new_entries):
                lines.insert(insert_index, entry)
            
            # Write updated content
            with open(summary_path, 'w') as f:
                f.write('\n'.join(lines))
            
            print(f"Added {len(new_entries)} new entries to SUMMARY.md:")
            for entry in new_entries:
                print(f"  {entry}")
            
            return True

        # Run the update
        changes_made = update_summary()
        
        # Set output for next step
        with open(os.environ['GITHUB_ENV'], 'a') as f:
            f.write(f"CHANGES_MADE={'true' if changes_made else 'false'}\n")
        EOF

    - name: Commit changes
      if: env.CHANGES_MADE == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add SUMMARY.md
        git commit -m "Auto-update SUMMARY.md with new pages" || exit 0
        git push